#!/bin/bash

usage_info () {
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Run with -h flag for more info"
}

full_usage_info () {
	echo ""
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Running with no options will switch both cards and settings to the format (equivalent to running with -cs)"
	echo "Files for each format should be stored in formats/<format> inside the Cockatrice folder"
	echo ""
	echo "Options:"
	echo "-h	prints this help menu and exits"
  	echo "-n	create a new format"
	echo "-u	save currently loaded card files to format"
	echo "-t	save current settings files to format"
	echo "-c	switch card files to the format's"
	echo "-s	switch settings to the format's"
  	echo "-o	open the decklist folder for that format"
  	echo "-f	open the format folder for that format"
  	echo "-d	delete the format"
  	echo "-l	list all saved formats"
}

#================================
# Constants
#================================

#Mac Default
TRICE_PATH="$HOME/Library/Application Support/Cockatrice/Cockatrice"
#Linux Default (At least on Debian-based systems, probably most others)
#TRICE_PATH="$HOME/.local/share/Cockatrice/Cockatrice"

FORMATS_PATH="$TRICE_PATH/formats"
DECKLIST_PATH="$TRICE_PATH/decks"
SETTINGS_PATH="$TRICE_PATH/settings"
CUSTOM_IMG_PATH="$TRICE_PATH/pics/CUSTOM"

CARDS_XML='cards.xml'
TOKENS_XML='tokens.xml'
GLOBAL_INI='global.ini'
DOWNLOADS_INI='downloads.ini'
FILTERS_INI='gamefilters.ini'

MANAGED_IMG_FILE='cockswitch_managed.txt'

#================================
# optargs
#================================

no_opts=true
allow_no_args=false
require_args=false
do_new=false
do_store_cards=false
do_store_settings=false
do_switch_cards=false
do_switch_settings=false
do_open_decklists=false 
do_open_format=false 
do_delete=false
do_list=false

process_optargs () {
  	local OPTIND
  	while getopts "hnutcsofdl" option; do
  	 	case $option in
   	   		h)
   	     		full_usage_info
   	     		exit 1 ;;
   	   		n)
   	     		do_new=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		u)
   	     		do_store_cards=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	t)
   	     		do_store_settings=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	c)
   	     		do_switch_cards=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	s)
   	     		do_switch_settings=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		o)
   	     		do_open_decklists=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		f)
   	     		do_open_format=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		d)
   	     		do_delete=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		l)
   	     		do_list=true 
   	     		no_opts=false
   	     		allow_no_args=true ;;
   	  		\?)
   	     		exit 1 ;;
   		esac
  	done

  	shift $((OPTIND-1))

  	# validate args
  	local required_arg_count=1
  	if $allow_no_args && ! $require_args; then
  		required_arg_count=0
  	fi

  	if [ $# -ne $required_arg_count ]; then 
		usage_info 
		exit 1
 	fi

 	# determine if switching is needed
	if $no_opts; then
		do_switch_cards=true
		do_switch_settings=true
  	fi

 	# go to cockatrice folder
 	cd "$TRICE_PATH"

	# run the appropriate command
 	if $do_new; then make_format "${@}"; fi
 	if $do_store_cards; then store_cards "${@}"; fi
 	if $do_store_settings; then store_settings "${@}"; fi
 	if $do_open_decklists; then open_format_decklists "${@}"; fi
 	if $do_open_format; then open_format_folder "${@}"; fi
 	if $do_switch_cards; then switch_cards "${@}"; fi
 	if $do_switch_settings; then switch_settings "${@}"; fi
 	if $do_delete; then delete_format "${@}"; fi
 	if $do_list; then list_formats; fi
}

#================================
# Create format
#================================

make_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	mkdir "$destpath" 2> /dev/null && { 
		echo "Created format $format" 
	} || {
		echo "Error: format $format already exists"
	}
}

#================================
# Switch cards
#================================

switch_cards () {
	local format="$1"
	local sourcepath="$FORMATS_PATH/$format"

	if [ ! -d "$sourcepath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	cp -f "$sourcepath/$CARDS_XML" "$sourcepath/$TOKENS_XML" ./ 2> /dev/null && {
		echo "Switched to $format (card files)"
		switch_custom_images "$format"
	} || {
		echo "Error: format $format is missing card files"
	}
}

switch_custom_images () {
	remove_old_images && symlink_new_images "$1"
}

remove_old_images () {
	# go to custom images folder
	cd "$CUSTOM_IMG_PATH"

	# check if old format had custom images
	if [ ! -f "$MANAGED_IMG_FILE" ]; then
		return 0
	fi

	# remove all folders in the tracking file
	removed_folders=""
	while read set; do
    	rm -r "$set" && removed_folders+="$set "
	done < "$MANAGED_IMG_FILE"

	echo "Removed the following from custom images: $removed_folders"

	# delete tracking file
	rm "$MANAGED_IMG_FILE"
}

symlink_new_images() {
	local format="$1"
	local sourcepath="$FORMATS_PATH/$format"
	local custom_image_path="$sourcepath/CUSTOM"

	# check if format has custom images
	if [ ! -d "$custom_image_path" ]; then
		return 0
	fi

	# start writing tracking file
	local tracking_file="$CUSTOM_IMG_PATH/$MANAGED_IMG_FILE"
	touch "$tracking_file"

	# symlink all directories in CUSTOM
	for setfolder in "$custom_image_path"/*; do
		if [ -d "$setfolder" ]; then
			setname=$(basename "$setfolder")

			ln -s "$setfolder" "$CUSTOM_IMG_PATH" 2> /dev/null && {
				# only append setname to tracking file if it was successfully symlinked
				echo "$setname" >> "$tracking_file"
			} || {
				echo "Failed to symlink custom images for $setname;"\
				"does a folder with that name already exist in CUSTOM?"
			}
		fi
	done

	echo "Symlinked custom images for $format"
}

#================================
# Switch settings
#================================

switch_settings () {
	local format="$1"
	local sourcepath="$FORMATS_PATH/$format"

	if [ ! -d "$sourcepath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	cp -f "$sourcepath/$GLOBAL_INI" "$sourcepath/$DOWNLOADS_INI" "$sourcepath/$FILTERS_INI" "$SETTINGS_PATH/" 2> /dev/null && {
		echo "Switched to $format (settings files)"
	} || {
		echo "Format $format does not have saved settings files."
	} 
}

#================================
# Store cards for format
#================================

store_cards () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	cp -f "./$CARDS_XML" "./$TOKENS_XML" "$destpath" &&
	echo "Updated $format with current card files"
}

#================================
# Store settings for format
#================================

store_settings () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	cp -f "$SETTINGS_PATH/$GLOBAL_INI" "$SETTINGS_PATH/$DOWNLOADS_INI" "$SETTINGS_PATH/$FILTERS_INI" "$destpath" &&
	echo "Updated $format with current settings files"
}

#================================
# Open format decklist folder
#================================

open_format_decklists () {
	local format="$1"
	local destpath="$DECKLIST_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Decklist folder for $format does not exist; created new folder"
		mkdir "$destpath"
	fi

	open "$destpath"
}

#================================
# Open format folder
#================================

open_format_folder () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	open "$destpath"
}

#================================
# Delete format
#================================

delete_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return 1
	fi

	rm -r "$destpath" &&
	echo "Deleted format $format"
}

#================================
# List formats
#================================

list_formats () {
	ls "$FORMATS_PATH"
}

#================================
# Actual entrance point
#================================
 
process_optargs "${@}"


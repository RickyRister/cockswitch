#!/bin/bash

usage_info () {
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Run with -h flag for more info"
}

full_usage_info () {
	echo ""
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Running with no options is equivalent to running with -s"
	echo "Files for each format should be stored in formats/<format> inside the Cockatrice folder"
	echo ""
	echo "Options:"
	echo "-h	prints this help menu and exits"
  	echo "-n	create a new format"
	echo "-u	save currently loaded card files to format"
  	echo "-w	edit the format's notes"
  	echo "-p	print the format's notes"
  	echo "-o	open the decklist folder for that format"
  	echo "-s	switch to the format afterwards"
  	echo "-d	delete the format"
  	echo "-l	list all saved formats"
}

#================================
# Constants
#================================

trice_path="$HOME/Library/Application Support/Cockatrice/Cockatrice"
formats_path="$trice_path/formats"
decklist_path="$trice_path/decks"
card_file='cards.xml'
token_file='tokens.xml'
notes_file='notes.txt'

#================================
# optargs
#================================

no_opts=true
allow_no_args=false
require_args=false
always_switch=false
do_new=false
do_store=false
do_write=false
do_info=false
do_open=false 
do_delete=false
do_list=false

process_optargs () {
  	local OPTIND
  	while getopts "hnuwposdl" option; do
  	 	case $option in
   	   		h)
   	     		full_usage_info
   	     		exit 1 ;;
   	   		n)
   	     		do_new=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		u)
   	     		do_store=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		w)
   	     		do_write=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		p)
   	     		do_info=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		o)
   	     		do_open=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		s)
   	     		always_switch=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		d)
   	     		do_delete=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		l)
   	     		do_list=true 
   	     		no_opts=false
   	     		allow_no_args=true ;;
   	  		\?)
   	     		exit 1 ;;
   		esac
  	done

  	shift $((OPTIND-1))

  	# validate args
  	local arg_count=1
  	if [ $allow_no_args = 'true' ] && [ $require_args = 'false' ]; then
  		arg_count=0
  	fi

  	if [ $# -ne $arg_count ]; then 
		usage_info 
		exit 1
 	fi

 	# determine if switching is needed
 	local do_switch=false
	if [ $no_opts = 'true' ] || [ $always_switch = 'true' ]; then
  		do_switch=true
  	fi

 	# go to cockatrice folder
 	cd "$trice_path"

	# run the appropriate command
 	if [ $do_new = 'true' ]; then make_format "${@}"; fi
 	if [ $do_store = 'true' ]; then store_format "${@}"; fi
 	if [ $do_write = 'true' ]; then write_format "${@}"; fi
 	if [ $do_info = 'true' ]; then info_format "${@}"; fi
 	if [ $do_open = 'true' ]; then open_format "${@}"; fi
 	if [ $do_switch = 'true' ]; then switch_format "${@}"; fi
 	if [ $do_delete = 'true' ]; then delete_format "${@}"; fi
 	if [ $do_list = 'true' ]; then list_formats; fi
}

#================================
# Create format
#================================

make_format () {
	local format="$1"
	local destpath="$formats_path/$format"

	mkdir "$destpath" 2> /dev/null && { 
		echo "Created format $format" 
	} || {
		echo "Error: format $format already exists"
	}
}

#================================
# Switch format
#================================

switch_format () {
	local format="$1"
	local sourcepath="$formats_path/$format"

	if [ ! -d "$sourcepath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "$sourcepath/$card_file" "$sourcepath/$token_file" ./ 2> /dev/null && {
		echo "Switched to $format"
	} || {
		echo "Error: format $format is missing card files"
	}
}

#================================
# Store format
#================================

store_format () {
	local format="$1"
	local destpath="$formats_path/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "./$card_file" "./$token_file" "$destpath" &&
	echo "Updated $format with current card files"
}

#================================
# Write format notes
#================================

write_format () {
	local format="$1"
	local destpath="$formats_path/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	"${EDITOR}" "$destpath/$notes_file" && {
		echo "Edited notes for $format"
	}
}

#================================
# Read format notes
#================================

info_format () {
	local format="$1"
	local destpath="$formats_path/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cat "$destpath/$notes_file" 2> /dev/null || {
		echo "Error: No notes found for $format. Write notes with -w"
	}
}

#================================
# Open format decklist folder
#================================

open_format () {
	local format="$1"
	local destpath="$decklist_path/$format"

	if [ ! -d "$destpath" ]; then
		echo "Decklist folder for $format does not exist; created new folder"
		mkdir "$destpath"
	fi

	open "$destpath"
}

#================================
# Delete format
#================================

delete_format () {
	local format="$1"
	local destpath="$formats_path/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	rm -r "$destpath" &&
	echo "Deleted format $format"
}

#================================
# List formats
#================================

list_formats () {
	ls "$formats_path"
}

#================================
# Actual entrance point
#================================
 
process_optargs "${@}"


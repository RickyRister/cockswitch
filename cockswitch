#!/bin/bash

usage_info () {
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Run with -h flag for more info"
}

full_usage_info () {
	echo ""
	echo "Switch between different formats' cards on Cockatrice"
	echo "Usage: cockswitch [options] <Format>"
	echo ""
	echo "Running with no options will switch both cards and settings to the format (equivalent to running with -cs)"
	echo "Files for each format should be stored in formats/<format> inside the Cockatrice folder"
	echo ""
	echo "Options:"
	echo "-h	prints this help menu and exits"
  	echo "-n	create a new format"
	echo "-u	save currently loaded card files to format"
	echo "-t	save current settings files to format"
	echo "-c	switch card files to the format's"
	echo "-s	switch settings to the format's"
  	echo "-w	edit the format's notes"
  	echo "-p	print the format's notes"
  	echo "-o	open the decklist folder for that format"
  	echo "-d	delete the format"
  	echo "-l	list all saved formats"
}

#================================
# Constants
#================================

#Mac Default
TRICE_PATH="$HOME/Library/Application Support/Cockatrice/Cockatrice"
#Linux Default (At least on Debian-based systems, probably most others)
#TRICE_PATH="$HOME/.local/share/Cockatrice/Cockatrice"

FORMATS_PATH="$TRICE_PATH/formats"
DECKLIST_PATH="$TRICE_PATH/decks"
SETTINGS_PATH="$TRICE_PATH/settings"
CARD_FILE='cards.xml'
TOKEN_FILE='tokens.xml'
NOTES_FILE='notes.txt'
GLOBAL_FILE='global.ini'
DOWNLOADS_FILE='downloads.ini'
FILTER_FILE='gamefilters.ini'

#================================
# optargs
#================================

no_opts=true
allow_no_args=false
require_args=false
do_new=false
do_store_cards=false
do_store_settings=false
do_switch_cards=false
do_switch_settings=false
do_write=false
do_info=false
do_open=false 
do_delete=false
do_list=false

process_optargs () {
  	local OPTIND
  	while getopts "hnutcswpodl" option; do
  	 	case $option in
   	   		h)
   	     		full_usage_info
   	     		exit 1 ;;
   	   		n)
   	     		do_new=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		u)
   	     		do_store_cards=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	t)
   	     		do_store_settings=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	c)
   	     		do_switch_cards=true
   	     		no_opts=false
   	     		require_args=true ;;
   	     	s)
   	     		do_switch_settings=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		w)
   	     		do_write=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		p)
   	     		do_info=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		o)
   	     		do_open=true 
   	     		no_opts=false
   	     		require_args=true ;;
   	   		d)
   	     		do_delete=true
   	     		no_opts=false
   	     		require_args=true ;;
   	   		l)
   	     		do_list=true 
   	     		no_opts=false
   	     		allow_no_args=true ;;
   	  		\?)
   	     		exit 1 ;;
   		esac
  	done

  	shift $((OPTIND-1))

  	# validate args
  	local arg_count=1
  	if [ $allow_no_args = 'true' ] && [ $require_args = 'false' ]; then
  		arg_count=0
  	fi

  	if [ $# -ne $arg_count ]; then 
		usage_info 
		exit 1
 	fi

 	# determine if switching is needed
	if [ $no_opts = 'true' ] ; then
		do_switch_cards=true
		do_switch_settings=true
  	fi

 	# go to cockatrice folder
 	cd "$TRICE_PATH"

	# run the appropriate command
 	if [ $do_new = 'true' ]; then make_format "${@}"; fi
 	if [ $do_store_cards = 'true' ]; then store_cards "${@}"; fi
 	if [ $do_store_settings = 'true' ]; then store_settings "${@}"; fi
 	if [ $do_write = 'true' ]; then write_format "${@}"; fi
 	if [ $do_info = 'true' ]; then info_format "${@}"; fi
 	if [ $do_open = 'true' ]; then open_format "${@}"; fi
 	if [ $do_switch_cards = 'true' ]; then switch_cards "${@}"; fi
 	if [ $do_switch_settings = 'true' ]; then switch_settings "${@}"; fi
 	if [ $do_delete = 'true' ]; then delete_format "${@}"; fi
 	if [ $do_list = 'true' ]; then list_formats; fi
}

#================================
# Create format
#================================

make_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	mkdir "$destpath" 2> /dev/null && { 
		echo "Created format $format" 
	} || {
		echo "Error: format $format already exists"
	}
}

#================================
# Switch cards
#================================

switch_cards () {
	local format="$1"
	local sourcepath="$FORMATS_PATH/$format"

	if [ ! -d "$sourcepath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "$sourcepath/$CARD_FILE" "$sourcepath/$TOKEN_FILE" ./ 2> /dev/null && {
		echo "Switched to $format (card files)"
	} || {
		echo "Error: format $format is missing card files"
	}
}

#================================
# Switch settings
#================================

switch_settings () {
	local format="$1"
	local sourcepath="$FORMATS_PATH/$format"

	if [ ! -d "$sourcepath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "$sourcepath/$GLOBAL_FILE" "$sourcepath/$DOWNLOADS_FILE" "$sourcepath/$FILTER_FILE" "$SETTINGS_PATH/" 2> /dev/null && {
		echo "Switched to $format (settings files)"
	} || {
		echo "Format $format does not have saved settings files."
	} 
}

#================================
# Store cards for format
#================================

store_cards () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "./$CARD_FILE" "./$TOKEN_FILE" "$destpath" &&
	echo "Updated $format with current card files"
}

#================================
# Store settings for format
#================================

store_settings () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cp -f "$SETTINGS_PATH/$GLOBAL_FILE" "$SETTINGS_PATH/$DOWNLOADS_FILE" "$SETTINGS_PATH/$FILTER_FILE" "$destpath" &&
	echo "Updated $format with current settings files"
}

#================================
# Write format notes
#================================

write_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	"${EDITOR}" "$destpath/$NOTES_FILE" && {
		echo "Edited notes for $format"
	}
}

#================================
# Read format notes
#================================

info_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	cat "$destpath/$NOTES_FILE" 2> /dev/null || {
		echo "Error: No notes found for $format. Write notes with -w"
	}
}

#================================
# Open format decklist folder
#================================

open_format () {
	local format="$1"
	local destpath="$DECKLIST_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Decklist folder for $format does not exist; created new folder"
		mkdir "$destpath"
	fi

	open "$destpath"
}

#================================
# Delete format
#================================

delete_format () {
	local format="$1"
	local destpath="$FORMATS_PATH/$format"

	if [ ! -d "$destpath" ]; then
		echo "Error: format $format does not exist"
		return
	fi

	rm -r "$destpath" &&
	echo "Deleted format $format"
}

#================================
# List formats
#================================

list_formats () {
	ls "$FORMATS_PATH"
}

#================================
# Actual entrance point
#================================
 
process_optargs "${@}"

